/*
 * Copyright (C) 2014, United States Government, as represented by the
 * Administrator of the National Aeronautics and Space Administration.
 * All rights reserved.
 *
 * Symbolic Pathfinder (jpf-symbc) is licensed under the Apache License, 
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0. 
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and 
 * limitations under the License.
 */
package gov.nasa.jpf.symbc.bytecode;

import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Map;

import gov.nasa.jpf.Config;
import gov.nasa.jpf.symbc.numeric.IntegerConstant;
import gov.nasa.jpf.symbc.numeric.RealConstant;
import gov.nasa.jpf.vm.ClassInfo;
import gov.nasa.jpf.vm.ElementInfo;
import gov.nasa.jpf.vm.FieldInfo;
import gov.nasa.jpf.vm.Instruction;
import gov.nasa.jpf.vm.MethodInfo;
import gov.nasa.jpf.vm.ThreadInfo;

// need to fix names



public class INVOKESTATIC extends gov.nasa.jpf.jvm.bytecode.INVOKESTATIC {
	public INVOKESTATIC(String clsName, String methodName, String methodSignature) {
	    super(clsName, methodName, methodSignature);
	  }
	@Override
	public Instruction execute( ThreadInfo th) {
		ClassInfo clsInfo = getClassInfo();
		if (clsInfo == null){
	      return th.createAndThrowException("java.lang.NoClassDefFoundError", cname);
	    }

	    MethodInfo callee = getInvokedMethod(th);
	    
	    if (callee == null) {
	      return th.createAndThrowException("java.lang.NoSuchMethodException!!",
	                                   cname + '.' + mname);
	    }
	    /*******Licious Function*******/
		
	    Config conf = th.getVM().getConfig();
	    String[] skip = conf.getStringArray("nhandler.spec.skip");
	    BytecodeUtils.set_skip_function(skip);
	    System.out.println("call---"+callee.getBaseName()); 
	    if( BytecodeUtils.isBlackBoxFunction(callee.getBaseName())){
	    	ElementInfo eleInfo = clsInfo.getStaticElementInfo();   	
	    	HashMap<String, Object> staticFileds = BytecodeUtils.getStaticFileds(clsInfo, eleInfo);
	    	
	    	HashMap<Integer, Object> allArgs = new HashMap<Integer, Object>();
	    	Object[] argAttrs = this.getArgumentAttrs(th);
	    	Object[] argVals = this.getArgumentValues(th);
	    	String[] argTypes = callee.getArgumentTypeNames();
	    	int argSize = callee.getNumberOfArguments();
	    	
	    	//for(int i = 0; i < argSize; i ++)
	    		//System.out.println(i + "__" + argTypes[i]);
	    	for(int i = 0; i < argSize; i ++){
	    		if(argAttrs[i] != null){
	    			allArgs.put(i, argAttrs[i]);
	    		}else{
	    			String value = argVals[i].toString();
	      		  	String valType = argTypes[i];
	      		  
	      		  	if(valType.equals("short") || valType.equals("int") || valType.equals("long")){
	      			  Object o = new IntegerConstant(Integer.parseInt(value));
	      			  allArgs.put(i, o);
	      		  }else if(valType.equals("float") || valType.equals("double")){
	      			  Object o = new RealConstant(Double.parseDouble(value));
	      			  allArgs.put(i, o);
	      		  }else{
	      			  ;//System.out.println("Unrecognized Type");
	      		  }
	    		}
	    			
	    	}
	    	th.getMJIEnv().setFieldAttr(staticFileds);
	    	th.getMJIEnv().setArgAttr(allArgs);
	    }
		
	    /*******Licious Function*******/
        
	    BytecodeUtils.InstructionOrSuper nextInstr = BytecodeUtils.execute(this, th);
        if (nextInstr.callSuper) {
            return super.execute( th);
        } else {
            return nextInstr.inst;
        }
    }
	
}
